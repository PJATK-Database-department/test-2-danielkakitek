// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test2.Context;

#nullable disable

namespace Test2.Migrations
{
    [DbContext(typeof(RepairShopDbContext))]
    [Migration("20220609082502_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Test2.Models.Car", b =>
                {
                    b.Property<int>("IdCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCar"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.HasKey("IdCar");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Test2.Models.Inspection", b =>
                {
                    b.Property<int>("IdInspection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInspection"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("IdCar")
                        .HasColumnType("int");

                    b.Property<int>("IdMechanic")
                        .HasColumnType("int");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdInspection");

                    b.HasIndex("IdCar");

                    b.HasIndex("IdMechanic");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("Test2.Models.Mechanic", b =>
                {
                    b.Property<int>("IdMechanic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMechanic"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdMechanic");

                    b.ToTable("Mechanics");
                });

            modelBuilder.Entity("Test2.Models.ServiceTypeDict", b =>
                {
                    b.Property<int>("IdServiceType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdServiceType"), 1L, 1);

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdServiceType");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Test2.Models.ServiceTypeDict_Inspection", b =>
                {
                    b.Property<int>("IdServiceType")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("IdInspection")
                        .HasColumnType("int");

                    b.HasKey("IdServiceType");

                    b.HasIndex("IdInspection");

                    b.ToTable("ServiceTypeDict_Inspections");
                });

            modelBuilder.Entity("Test2.Models.Inspection", b =>
                {
                    b.HasOne("Test2.Models.Car", "Car")
                        .WithMany("Inspections")
                        .HasForeignKey("IdCar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test2.Models.Mechanic", "Mechanic")
                        .WithMany("Inspections")
                        .HasForeignKey("IdMechanic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Mechanic");
                });

            modelBuilder.Entity("Test2.Models.ServiceTypeDict_Inspection", b =>
                {
                    b.HasOne("Test2.Models.Inspection", "Inspection")
                        .WithMany("ServiceTypeDict_Inspections")
                        .HasForeignKey("IdInspection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test2.Models.ServiceTypeDict", "ServiceTypeDict")
                        .WithMany("ServiceTypeDict_Inspections")
                        .HasForeignKey("IdServiceType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspection");

                    b.Navigation("ServiceTypeDict");
                });

            modelBuilder.Entity("Test2.Models.Car", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("Test2.Models.Inspection", b =>
                {
                    b.Navigation("ServiceTypeDict_Inspections");
                });

            modelBuilder.Entity("Test2.Models.Mechanic", b =>
                {
                    b.Navigation("Inspections");
                });

            modelBuilder.Entity("Test2.Models.ServiceTypeDict", b =>
                {
                    b.Navigation("ServiceTypeDict_Inspections");
                });
#pragma warning restore 612, 618
        }
    }
}
